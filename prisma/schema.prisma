generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User { 
  id            String          @id @default(cuid())
  email         String          @unique
  createdAt     DateTime        @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime        @updatedAt
  password      String?
  role          Role            @default(CLIENT)
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]

  // Relations to role-specific tables (only defined on one side)
  client        Client? @relation("UserClient")
  admin         Admin?  @relation("UserAdmin")
  staff         Staff?  @relation("UserStaff")
}



model Client {
  id            String @id @default(cuid())
  userId        String @unique
  email         String @unique 
  emailVerified DateTime?
  username      String?
  user          User   @relation("UserClient", fields: [userId], references: [id], onDelete: Cascade) 
  bio           String?
  imageUrl      String?
}

model Admin {
  id       String @id @default(cuid())
  userId   String @unique
  email    String @unique
  username String?
  user     User   @relation("UserAdmin", fields: [userId], references: [id], onDelete: Cascade) 
  bio      String?
  imageUrl String?
  department String?
  name       String?
}

model Staff {
  id       String @id @default(cuid())
  userId   String @unique
  email    String @unique
  username String?
  user     User   @relation("UserStaff", fields: [userId], references: [id], onDelete: Cascade) 
  bio      String?
  imageUrl String?
  department String?
  name       String?
}

enum Role {
  CLIENT
  ADMIN
  STAFF
}

model PasswordResetToken {
  id      String   @id @default(cuid())   // Auto-generates unique ID
  email   String                           // Required email
  token   String   @unique                 // Token must be unique
  expires DateTime                         // Expiration time

  @@unique([email, token])                 // Composite unique constraint
  @@index([expires])                       // Index for fast queries on expiration
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  email      String
  token      String
  expires    DateTime

  @@unique([email, token])
  @@index([expires])
}


model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Feedback {
  id          String   @id @default(cuid())
  rating      Int
  issues      String[] // Store selected issues as an array of strings
  comment     String?
  email       String   // Add this field to store the user's email
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
